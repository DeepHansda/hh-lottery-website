{
  "address": "0x29c1585722df81aa771E82551916Eb807eDd4A3D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2Address",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "keepersUpdateInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lotteryEntranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Lottery__LotteryNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__SendMoreToEnterLottery",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lotteryState",
          "type": "uint256"
        }
      ],
      "name": "Lottery__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "EnterLottery",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "request_id",
          "type": "uint256"
        }
      ],
      "name": "RequestedLotteryWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upKeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getlotteryEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcc900c8bfff3e99e27fb8e4093377b82ab880a91b5033cf26c1a81cf5daa0d96",
  "receipt": {
    "to": null,
    "from": "0x4fDbcD29A9EB9543A2bFA941e78B711C290BA2f5",
    "contractAddress": "0x29c1585722df81aa771E82551916Eb807eDd4A3D",
    "transactionIndex": 11,
    "gasUsed": "1070880",
    "logsBloom": "0x
    "blockHash": "0x21b533076e3ae9184f25ce5b1de9f278964e5cd3afb93567f5d4dc741c739ff9",
    "transactionHash": "0xcc900c8bfff3e99e27fb8e4093377b82ab880a91b5033cf26c1a81cf5daa0d96",
    "logs": [],
    "blockNumber": 3139280,
    "cumulativeGasUsed": "1431666",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "6926",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "30",
    "10000000000000000",
    "500000"
  ],
  "numDeployments": 3,
  "solcInputHash": "f147b79d9e2cff05a3270f02d58ebc02",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2Address\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"keepersUpdateInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryEntranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Lottery__LotteryNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__SendMoreToEnterLottery\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryState\",\"type\":\"uint256\"}],\"name\":\"Lottery__UpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"EnterLottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"request_id\",\"type\":\"uint256\"}],\"name\":\"RequestedLotteryWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upKeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getlotteryEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n\\nerror Lottery__SendMoreToEnterLottery();\\nerror Lottery__LotteryNotOpen();\\nerror Lottery__UpkeepNotNeeded(\\n    uint256 currentBalance,\\n    uint256 numPlayers,\\n    uint256 lotteryState\\n);\\nerror Raffle__TransferFailed();\\n\\ncontract Lottery is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n    enum LotteryState {\\n        OPEN,\\n        CALCULATING\\n    }\\n\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    uint64 private immutable i_subscriptionId;\\n    bytes32 private immutable i_gasLane;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    uint256 private immutable i_lotteryEntranceFee;\\n    address payable[] private s_players;\\n    LotteryState private s_lotteryState;\\n    uint256 private i_interval;\\n    uint256 private s_lastTimeStamp;\\n    address private s_recentWinner;\\n\\n    event EnterLottery(address indexed player);\\n    event WinnerPicked(address indexed player);\\n    event RequestedLotteryWinner(uint256 indexed request_id);\\n\\n    constructor(\\n        address vrfCoordinatorV2Address,\\n        uint64 subscriptionId,\\n        bytes32 gasLane,\\n        uint256 keepersUpdateInterval,\\n        uint256 lotteryEntranceFee,\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2Address) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2Address);\\n        i_lotteryEntranceFee = lotteryEntranceFee;\\n        i_interval = keepersUpdateInterval;\\n        s_lastTimeStamp = block.timestamp;\\n        i_callbackGasLimit = callbackGasLimit;\\n        i_gasLane= gasLane;\\n        i_subscriptionId = subscriptionId;\\n\\n    }\\n\\n    function enterLottery() public payable {\\n        if (msg.value < i_lotteryEntranceFee) {\\n            revert Lottery__SendMoreToEnterLottery();\\n        }\\n        if (s_lotteryState != LotteryState.OPEN) {\\n            revert Lottery__LotteryNotOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n        emit EnterLottery(msg.sender);\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            bool upKeepNeeded,\\n            bytes memory /*performData*/\\n        )\\n    {\\n        bool isOpened = LotteryState.OPEN == s_lotteryState;\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        bool hasPlayers = s_players.length > 0;\\n        bool hasBalance = address(this).balance > 0;\\n        upKeepNeeded = (isOpened && timePassed && hasPlayers && hasBalance);\\n    }\\n\\n    function performUpkeep(\\n        bytes calldata /*performData*/\\n    ) external override {\\n        (bool upKeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upKeepNeeded) {\\n            revert Lottery__UpkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_lotteryState)\\n            );\\n        }\\n\\n        s_lotteryState = LotteryState.CALCULATING;\\n        uint256 request_id = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n\\n        emit RequestedLotteryWinner(request_id);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256,\\n        /* requestId */\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 winnerIndex = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[winnerIndex];\\n        s_recentWinner = recentWinner;\\n        s_players = new address payable[](0);\\n        s_lotteryState = LotteryState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n\\n        if (!success) {\\n            revert Raffle__TransferFailed();\\n        }\\n\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    function getlotteryEntranceFee() public view returns (uint256) {\\n        return i_lotteryEntranceFee;\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getNumOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n}\\n\",\"keccak256\":\"0xbda0efdc72578098c3ca5c0fbd9531a1a98e4840de06f58948524532b2ce7204\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b50604051620014d1380380620014d1833981810160405281019062000038919062000264565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff168152505081610120818152505082600281905550426003819055508063ffffffff166101008163ffffffff16815250508360e081815250508467ffffffffffffffff1660c08167ffffffffffffffff168152505050505050505062000300565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001308262000103565b9050919050565b620001428162000123565b81146200014e57600080fd5b50565b600081519050620001628162000137565b92915050565b600067ffffffffffffffff82169050919050565b620001878162000168565b81146200019357600080fd5b50565b600081519050620001a7816200017c565b92915050565b6000819050919050565b620001c281620001ad565b8114620001ce57600080fd5b50565b600081519050620001e281620001b7565b92915050565b6000819050919050565b620001fd81620001e8565b81146200020957600080fd5b50565b6000815190506200021d81620001f2565b92915050565b600063ffffffff82169050919050565b6200023e8162000223565b81146200024a57600080fd5b50565b6000815190506200025e8162000233565b92915050565b60008060008060008060c08789031215620002845762000283620000fe565b5b60006200029489828a0162000151565b9650506020620002a789828a0162000196565b9550506040620002ba89828a01620001d1565b9450506060620002cd89828a016200020c565b9350506080620002e089828a016200020c565b92505060a0620002f389828a016200024d565b9150509295509295509295565b60805160a05160c05160e05161010051610120516111736200035e6000396000818161050701526106780152600061038701526000610343015260006103640152600061030701526000818161019201526101e601526111736000f3fe6080604052600436106100705760003560e01c8063565429de1161004e578063565429de146100f25780636e04ff0d1461011d578063c1af57851461015b578063eec5f3531461016557610070565b80631fe543e3146100755780634585e33b1461009e578063473f1ddc146100c7575b600080fd5b34801561008157600080fd5b5061009c60048036038101906100979190610b17565b610190565b005b3480156100aa57600080fd5b506100c560048036038101906100c09190610bce565b610250565b005b3480156100d357600080fd5b506100dc610440565b6040516100e99190610c5c565b60405180910390f35b3480156100fe57600080fd5b5061010761046a565b6040516101149190610c86565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610d56565b610476565b604051610152929190610e39565b60405180910390f35b610163610505565b005b34801561017157600080fd5b5061017a610674565b6040516101879190610c86565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461024257337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610239929190610e69565b60405180910390fd5b61024c828261069c565b5050565b600061026a60405180602001604052806000815250610476565b509050806102d95747600080549050600160009054906101000a900460ff16600181111561029b5761029a610e92565b5b6040517f6e195f250000000000000000000000000000000000000000000000000000000081526004016102d093929190610ec1565b60405180910390fd5b60018060006101000a81548160ff021916908360018111156102fe576102fd610e92565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016103c8959493929190610f70565b6020604051808303816000875af11580156103e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040b9190610fd8565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008080549050905090565b600060606000600160009054906101000a900460ff16600181111561049e5761049d610e92565b5b600060018111156104b2576104b1610e92565b5b1490506000600254600354426104c89190611034565b119050600080600080549050119050600080471190508380156104e85750825b80156104f15750815b80156104fa5750805b955050505050915091565b7f000000000000000000000000000000000000000000000000000000000000000034101561055f576040517fa4078c2400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561057357610572610e92565b5b600160009054906101000a900460ff16600181111561059557610594610e92565b5b146105cc576040517f823ea8bb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fde7ffaf8976e3b39d4fb74cd196ccae530bbcc6539e8f8e5db2cc61ef21b9ac260405160405180910390a2565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008080549050826000815181106106b7576106b6611068565b5b60200260200101516106c991906110c6565b905060008082815481106106e0576106df611068565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610769576107686109d4565b5b6040519080825280602002602001820160405280156107975781602001602082028036833780820191505090505b50600090805190602001906107ad9291906108cd565b506000600160006101000a81548160ff021916908360018111156107d4576107d3610e92565b5b02179055504260038190555060008173ffffffffffffffffffffffffffffffffffffffff164760405161080690611128565b60006040518083038185875af1925050503d8060008114610843576040519150601f19603f3d011682016040523d82523d6000602084013e610848565b606091505b5050905080610883576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610946579160200282015b828111156109455782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906108ed565b5b5090506109539190610957565b5090565b5b80821115610970576000816000905550600101610958565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61099b81610988565b81146109a657600080fd5b50565b6000813590506109b881610992565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610a0c826109c3565b810181811067ffffffffffffffff82111715610a2b57610a2a6109d4565b5b80604052505050565b6000610a3e610974565b9050610a4a8282610a03565b919050565b600067ffffffffffffffff821115610a6a57610a696109d4565b5b602082029050602081019050919050565b600080fd5b6000610a93610a8e84610a4f565b610a34565b90508083825260208201905060208402830185811115610ab657610ab5610a7b565b5b835b81811015610adf5780610acb88826109a9565b845260208401935050602081019050610ab8565b5050509392505050565b600082601f830112610afe57610afd6109be565b5b8135610b0e848260208601610a80565b91505092915050565b60008060408385031215610b2e57610b2d61097e565b5b6000610b3c858286016109a9565b925050602083013567ffffffffffffffff811115610b5d57610b5c610983565b5b610b6985828601610ae9565b9150509250929050565b600080fd5b60008083601f840112610b8e57610b8d6109be565b5b8235905067ffffffffffffffff811115610bab57610baa610b73565b5b602083019150836001820283011115610bc757610bc6610a7b565b5b9250929050565b60008060208385031215610be557610be461097e565b5b600083013567ffffffffffffffff811115610c0357610c02610983565b5b610c0f85828601610b78565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c4682610c1b565b9050919050565b610c5681610c3b565b82525050565b6000602082019050610c716000830184610c4d565b92915050565b610c8081610988565b82525050565b6000602082019050610c9b6000830184610c77565b92915050565b600080fd5b600067ffffffffffffffff821115610cc157610cc06109d4565b5b610cca826109c3565b9050602081019050919050565b82818337600083830152505050565b6000610cf9610cf484610ca6565b610a34565b905082815260208101848484011115610d1557610d14610ca1565b5b610d20848285610cd7565b509392505050565b600082601f830112610d3d57610d3c6109be565b5b8135610d4d848260208601610ce6565b91505092915050565b600060208284031215610d6c57610d6b61097e565b5b600082013567ffffffffffffffff811115610d8a57610d89610983565b5b610d9684828501610d28565b91505092915050565b60008115159050919050565b610db481610d9f565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610df4578082015181840152602081019050610dd9565b60008484015250505050565b6000610e0b82610dba565b610e158185610dc5565b9350610e25818560208601610dd6565b610e2e816109c3565b840191505092915050565b6000604082019050610e4e6000830185610dab565b8181036020830152610e608184610e00565b90509392505050565b6000604082019050610e7e6000830185610c4d565b610e8b6020830184610c4d565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000606082019050610ed66000830186610c77565b610ee36020830185610c77565b610ef06040830184610c77565b949350505050565b6000819050919050565b610f0b81610ef8565b82525050565b600067ffffffffffffffff82169050919050565b610f2e81610f11565b82525050565b600061ffff82169050919050565b610f4b81610f34565b82525050565b600063ffffffff82169050919050565b610f6a81610f51565b82525050565b600060a082019050610f856000830188610f02565b610f926020830187610f25565b610f9f6040830186610f42565b610fac6060830185610f61565b610fb96080830184610f61565b9695505050505050565b600081519050610fd281610992565b92915050565b600060208284031215610fee57610fed61097e565b5b6000610ffc84828501610fc3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061103f82610988565b915061104a83610988565b925082820390508181111561106257611061611005565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006110d182610988565b91506110dc83610988565b9250826110ec576110eb611097565b5b828206905092915050565b600081905092915050565b50565b60006111126000836110f7565b915061111d82611102565b600082019050919050565b600061113382611105565b915081905091905056fea26469706673582212202ad7fadd6f76af1a48b26af8469f8b69894831d5a7d760ee6446c2e23ea9bae864736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c8063565429de1161004e578063565429de146100f25780636e04ff0d1461011d578063c1af57851461015b578063eec5f3531461016557610070565b80631fe543e3146100755780634585e33b1461009e578063473f1ddc146100c7575b600080fd5b34801561008157600080fd5b5061009c60048036038101906100979190610b17565b610190565b005b3480156100aa57600080fd5b506100c560048036038101906100c09190610bce565b610250565b005b3480156100d357600080fd5b506100dc610440565b6040516100e99190610c5c565b60405180910390f35b3480156100fe57600080fd5b5061010761046a565b6040516101149190610c86565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610d56565b610476565b604051610152929190610e39565b60405180910390f35b610163610505565b005b34801561017157600080fd5b5061017a610674565b6040516101879190610c86565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461024257337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610239929190610e69565b60405180910390fd5b61024c828261069c565b5050565b600061026a60405180602001604052806000815250610476565b509050806102d95747600080549050600160009054906101000a900460ff16600181111561029b5761029a610e92565b5b6040517f6e195f250000000000000000000000000000000000000000000000000000000081526004016102d093929190610ec1565b60405180910390fd5b60018060006101000a81548160ff021916908360018111156102fe576102fd610e92565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016103c8959493929190610f70565b6020604051808303816000875af11580156103e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040b9190610fd8565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008080549050905090565b600060606000600160009054906101000a900460ff16600181111561049e5761049d610e92565b5b600060018111156104b2576104b1610e92565b5b1490506000600254600354426104c89190611034565b119050600080600080549050119050600080471190508380156104e85750825b80156104f15750815b80156104fa5750805b955050505050915091565b7f000000000000000000000000000000000000000000000000000000000000000034101561055f576040517fa4078c2400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561057357610572610e92565b5b600160009054906101000a900460ff16600181111561059557610594610e92565b5b146105cc576040517f823ea8bb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fde7ffaf8976e3b39d4fb74cd196ccae530bbcc6539e8f8e5db2cc61ef21b9ac260405160405180910390a2565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008080549050826000815181106106b7576106b6611068565b5b60200260200101516106c991906110c6565b905060008082815481106106e0576106df611068565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610769576107686109d4565b5b6040519080825280602002602001820160405280156107975781602001602082028036833780820191505090505b50600090805190602001906107ad9291906108cd565b506000600160006101000a81548160ff021916908360018111156107d4576107d3610e92565b5b02179055504260038190555060008173ffffffffffffffffffffffffffffffffffffffff164760405161080690611128565b60006040518083038185875af1925050503d8060008114610843576040519150601f19603f3d011682016040523d82523d6000602084013e610848565b606091505b5050905080610883576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610946579160200282015b828111156109455782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906108ed565b5b5090506109539190610957565b5090565b5b80821115610970576000816000905550600101610958565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61099b81610988565b81146109a657600080fd5b50565b6000813590506109b881610992565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610a0c826109c3565b810181811067ffffffffffffffff82111715610a2b57610a2a6109d4565b5b80604052505050565b6000610a3e610974565b9050610a4a8282610a03565b919050565b600067ffffffffffffffff821115610a6a57610a696109d4565b5b602082029050602081019050919050565b600080fd5b6000610a93610a8e84610a4f565b610a34565b90508083825260208201905060208402830185811115610ab657610ab5610a7b565b5b835b81811015610adf5780610acb88826109a9565b845260208401935050602081019050610ab8565b5050509392505050565b600082601f830112610afe57610afd6109be565b5b8135610b0e848260208601610a80565b91505092915050565b60008060408385031215610b2e57610b2d61097e565b5b6000610b3c858286016109a9565b925050602083013567ffffffffffffffff811115610b5d57610b5c610983565b5b610b6985828601610ae9565b9150509250929050565b600080fd5b60008083601f840112610b8e57610b8d6109be565b5b8235905067ffffffffffffffff811115610bab57610baa610b73565b5b602083019150836001820283011115610bc757610bc6610a7b565b5b9250929050565b60008060208385031215610be557610be461097e565b5b600083013567ffffffffffffffff811115610c0357610c02610983565b5b610c0f85828601610b78565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c4682610c1b565b9050919050565b610c5681610c3b565b82525050565b6000602082019050610c716000830184610c4d565b92915050565b610c8081610988565b82525050565b6000602082019050610c9b6000830184610c77565b92915050565b600080fd5b600067ffffffffffffffff821115610cc157610cc06109d4565b5b610cca826109c3565b9050602081019050919050565b82818337600083830152505050565b6000610cf9610cf484610ca6565b610a34565b905082815260208101848484011115610d1557610d14610ca1565b5b610d20848285610cd7565b509392505050565b600082601f830112610d3d57610d3c6109be565b5b8135610d4d848260208601610ce6565b91505092915050565b600060208284031215610d6c57610d6b61097e565b5b600082013567ffffffffffffffff811115610d8a57610d89610983565b5b610d9684828501610d28565b91505092915050565b60008115159050919050565b610db481610d9f565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610df4578082015181840152602081019050610dd9565b60008484015250505050565b6000610e0b82610dba565b610e158185610dc5565b9350610e25818560208601610dd6565b610e2e816109c3565b840191505092915050565b6000604082019050610e4e6000830185610dab565b8181036020830152610e608184610e00565b90509392505050565b6000604082019050610e7e6000830185610c4d565b610e8b6020830184610c4d565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000606082019050610ed66000830186610c77565b610ee36020830185610c77565b610ef06040830184610c77565b949350505050565b6000819050919050565b610f0b81610ef8565b82525050565b600067ffffffffffffffff82169050919050565b610f2e81610f11565b82525050565b600061ffff82169050919050565b610f4b81610f34565b82525050565b600063ffffffff82169050919050565b610f6a81610f51565b82525050565b600060a082019050610f856000830188610f02565b610f926020830187610f25565b610f9f6040830186610f42565b610fac6060830185610f61565b610fb96080830184610f61565b9695505050505050565b600081519050610fd281610992565b92915050565b600060208284031215610fee57610fed61097e565b5b6000610ffc84828501610fc3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061103f82610988565b915061104a83610988565b925082820390508181111561106257611061611005565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006110d182610988565b91506110dc83610988565b9250826110ec576110eb611097565b5b828206905092915050565b600081905092915050565b50565b60006111126000836110f7565b915061111d82611102565b600082019050919050565b600061113382611105565b915081905091905056fea26469706673582212202ad7fadd6f76af1a48b26af8469f8b69894831d5a7d760ee6446c2e23ea9bae864736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 218,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 221,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lotteryState",
        "offset": 0,
        "slot": "1",
        "type": "t_enum(LotteryState)198"
      },
      {
        "astId": 223,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "i_interval",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 225,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 227,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)198": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}